(globalThis.webpackChunkng_one_time_password=globalThis.webpackChunkng_one_time_password||[]).push([[179],{"./projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>ng_one_time_password_component_stories});var OneTimePasswordType,Key,InputEventType,InputType,common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),fesm2020_forms=__webpack_require__("./node_modules/@angular/forms/fesm2020/forms.mjs");!function(OneTimePasswordType){OneTimePasswordType.TEXT="text",OneTimePasswordType.NUMBER="number"}(OneTimePasswordType||(OneTimePasswordType={})),function(Key){Key.ARROW_LEFT="ArrowLeft",Key.ARROW_RIGHT="ArrowRight",Key.DELETE="Delete",Key.BACKSPACE="Backspace",Key.TAB="Tab",Key.SHIFT="Shift",Key.CONTROL="Control",Key.CAPS_LOCK="CapsLock",Key.NUM_LOCK="NumLock"}(Key||(Key={})),function(InputEventType){InputEventType.INSERT_TEXT="insertText",InputEventType.DELETE_CONTENT_BACKWARD="deleteContentBackward"}(InputEventType||(InputEventType={})),function(InputType){InputType.TEXT="text",InputType.PASSWORD="password"}(InputType||(InputType={}));var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),ng_one_time_password_componentngResource=__webpack_require__("./projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.html?ngResource"),ng_one_time_password_ng_one_time_password_componentngResource=__webpack_require__("./projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.scss?ngResource");let OneTimePasswordService=class OneTimePasswordService{generateFormGroup(length){const controls=[...Array(Number(length))].map((()=>new fesm2020_forms.FormControl)),group=Object.entries(controls).reduce(((prev,[key,control])=>Object.assign(Object.assign({},prev),{[`control-${key}`]:control})),{});return new fesm2020_forms.FormGroup(group)}};OneTimePasswordService=(0,tslib_es6.gn)([(0,core.Injectable)()],OneTimePasswordService);let InputService=class InputService{focusInput(sibling){if(sibling instanceof HTMLInputElement)return sibling.focus()}selectInput(sibling){if(sibling instanceof HTMLInputElement)return sibling.select()}handleInputChange(event,type){if(event instanceof InputEvent&&event.target instanceof HTMLInputElement)switch(event.inputType){case InputEventType.INSERT_TEXT:return type!==OneTimePasswordType.NUMBER||/[0-9]/.test(event.target.value)?this.focusInput(event.target.nextSibling):(event.target.value="",event.preventDefault(),void event.stopPropagation());case InputEventType.DELETE_CONTENT_BACKWARD:return this.focusInput(event.target.previousSibling)}}};InputService=(0,tslib_es6.gn)([(0,core.Injectable)()],InputService);let KeyboardService=class KeyboardService{constructor(_input){this._input=_input}handleKeyPress(event){if(event.target instanceof HTMLInputElement){switch(event.key){case Key.DELETE:case Key.BACKSPACE:if(event.target.value)return;return event.preventDefault(),this._input.focusInput(event.target.previousSibling);case Key.ARROW_LEFT:if(event.shiftKey)return;return this._input.focusInput(event.target.previousSibling);case Key.ARROW_RIGHT:if(event.shiftKey)return;return this._input.focusInput(event.target.nextSibling)}/^[0-9a-zA-Z]$/.test(event.key)&&event.target.value&&!event.shiftKey&&!event.ctrlKey&&(event.target.value="")}}};KeyboardService.ctorParameters=()=>[{type:InputService}],KeyboardService=(0,tslib_es6.gn)([(0,core.Injectable)()],KeyboardService);var NgOneTimePasswordComponent_1,Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js"),takeUntil=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js");let NgOneTimePasswordComponent=NgOneTimePasswordComponent_1=class NgOneTimePasswordComponent extends class ValueControl{constructor(){this.onChange=()=>{},this.onTouched=()=>{}}writeValue(value){this.value=value}registerOnChange(fn){this.onChange=fn}registerOnTouched(fn){this.onTouched=fn}}{constructor(_otp,_keyboard,_input){super(),this._otp=_otp,this._keyboard=_keyboard,this._input=_input,this.length=6,this.type=OneTimePasswordType.TEXT,this.focusOnInit=!1,this.masked=!1,this.wrapperClass="",this.inputClass="",this.controlsWrapper=null,this.controlsGroup=new fesm2020_forms.FormGroup({}),this._$destroy=new Subject.x}get controls(){return Object.values(this.controlsGroup.controls)}get inputType(){return this.masked?InputType.PASSWORD:InputType.TEXT}ngOnInit(){this._setupControls()}ngOnChanges(changes){const passwordLength=changes.length;(null==passwordLength?void 0:passwordLength.currentValue)&&passwordLength.currentValue!==(null==passwordLength?void 0:passwordLength.previousValue)&&!passwordLength.firstChange&&this._setupControls()}ngAfterViewInit(){var _a;const wrapper=null===(_a=this.controlsWrapper)||void 0===_a?void 0:_a.nativeElement;this.focusOnInit&&wrapper instanceof HTMLElement&&this._input.focusInput(wrapper.firstChild)}ngOnDestroy(){this._$destroy.next(!0)}onInputFocus(event){(null==event?void 0:event.target)&&this._input.selectInput(event.target)}onInputKeyDown(event){this._keyboard.handleKeyPress(event)}onInputChange(event){this._input.handleInputChange(event,this.type)}onInputPaste(event){var _a;const value=null===(_a=event.clipboardData)||void 0===_a?void 0:_a.getData("text");if(event.preventDefault(),null==value?void 0:value.length){if(this.type===OneTimePasswordType.NUMBER&&!/[0-9]+/g.test(value))return;this._setValue(value)}const[target,parent]=event.composedPath();parent instanceof HTMLElement&&this._input.focusInput(parent.lastElementChild)}writeValue(value){super.writeValue(value),value&&this._updateControls(value)}_onValueChange(value){this.value=value,this.onChange(value)}_setupControls(){this._$destroy.next(!0),this.length>0&&(this.controlsGroup=this._otp.generateFormGroup(this.length),this.controlsGroup.valueChanges.pipe((0,takeUntil.R)(this._$destroy)).subscribe((controlsValue=>{const value=Object.values(controlsValue).join("").trim();this._onValueChange(value)})))}_setValue(value){value&&this._updateControls(value),this._onValueChange(value)}_updateControls(value){var _a;null===(_a=this.controls)||void 0===_a||_a.forEach(((control,index)=>{control.setValue(value[index])}))}};NgOneTimePasswordComponent.ctorParameters=()=>[{type:OneTimePasswordService},{type:KeyboardService},{type:InputService}],NgOneTimePasswordComponent.propDecorators={length:[{type:core.Input}],type:[{type:core.Input}],focusOnInit:[{type:core.Input}],masked:[{type:core.Input}],wrapperClass:[{type:core.Input}],inputClass:[{type:core.Input}],controlsWrapper:[{type:core.ViewChild,args:["controlsWrapper",{static:!1}]}]},NgOneTimePasswordComponent=NgOneTimePasswordComponent_1=(0,tslib_es6.gn)([(0,core.Component)({selector:"ng-one-time-password",template:ng_one_time_password_componentngResource,changeDetection:core.ChangeDetectionStrategy.OnPush,providers:[{provide:fesm2020_forms.NG_VALUE_ACCESSOR,useExisting:(0,core.forwardRef)((()=>NgOneTimePasswordComponent_1)),multi:!0}],styles:[ng_one_time_password_ng_one_time_password_componentngResource]})],NgOneTimePasswordComponent);let NgOneTimePasswordModule=class NgOneTimePasswordModule{};NgOneTimePasswordModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[NgOneTimePasswordComponent],providers:[OneTimePasswordService,KeyboardService,InputService],imports:[common.ez,fesm2020_forms.ReactiveFormsModule],exports:[NgOneTimePasswordComponent]})],NgOneTimePasswordModule);var client=__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js");const ng_one_time_password_component_stories={title:"One Time Password",component:NgOneTimePasswordComponent,decorators:[(0,client.moduleMetadata)({imports:[common.ez,fesm2020_forms.ReactiveFormsModule,NgOneTimePasswordModule]}),(0,client.componentWrapperDecorator)((story=>`<div \n          style="\n            height: 200px; \n            width: 100%; \n            display: flex; \n            justify-content: \n            center; align-items: center;\n          ">\n            ${story}\n          </div>`))],argTypes:{registerOnTouched:{control:!1},registerOnChange:{control:!1},writeValue:{control:!1},onInputKeyDown:{control:!1},onInputPaste:{control:!1},onInputFocus:{control:!1},onInputChange:{control:!1},ngOnInit:{control:!1},ngOnDestroy:{control:!1},ngOnChanges:{control:!1},ngAfterViewInit:{control:!1},_updateControls:{control:!1},_setValue:{control:!1},_setupControls:{control:!1},_onValueChange:{control:!1},value:{control:!1},_$destroy:{control:!1},controlsGroup:{control:!1},onChange:{control:!1},onTouched:{control:!1},controlsWrapper:{control:!1},length:{control:{type:"number"}},masked:{control:{type:"boolean"}},type:{control:{type:"select",options:["text","number"]}}},parameters:{controls:{exclude:["_$destroy","controlsGroup","onChange","onTouched","controlsWrapper"]},backgrounds:{default:"light",values:[{name:"light",value:"#f5f5f5"},{name:"light-gray",value:"#b5b5b5"},{name:"dark",value:"#333333"}]}}},Template=args=>({props:Object.assign({},args)}),Default=Template.bind({});Template.args={length:6,type:OneTimePasswordType.TEXT}},"./.storybook/preview.js-generated-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,{__namedExportsOrder:()=>__namedExportsOrder,parameters:()=>parameters});var ClientApi=__webpack_require__("./node_modules/@storybook/client-api/dist/esm/ClientApi.js"),angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js");const documentation_namespaceObject=JSON.parse('{"pipes":[],"interfaces":[],"injectables":[{"name":"InputService","id":"injectable-InputService-3c737e4fb184a76b6ab0a90b841a541dbaa29f822371f890eed7cbbe2dca2ff48efd8e6a4630e464032cd0816d6ea50d7a1517797045fa5e4fa74b2e4cd668e2","file":"projects/ng-one-time-password/src/services/input.service.ts","properties":[],"methods":[{"name":"focusInput","args":[{"name":"sibling","type":"EventTarget | ChildNode | null","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":27,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nFocus input.\\n\\nMethod used to set active focus for specified HTML input element.\\nIt may be appliead for event targed or child node of any other event.\\n\\n\\n","description":"<p>Focus input.</p>\\n<p>Method used to set active focus for specified HTML input element.\\nIt may be appliead for event targed or child node of any other event.</p>\\n","jsdoctags":[{"name":{"pos":580,"end":587,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"sibling"},"type":"EventTarget | ChildNode | null","deprecated":false,"deprecationMessage":"","tagName":{"pos":574,"end":579,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>sibling input used to apply focus for.</li>\\n</ul>\\n"}]},{"name":"handleInputChange","args":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":""},{"name":"type","type":"OneTimePasswordType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":66,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandle input changes.\\n\\nMethod used during input changes event.\\nInitially based on `type` input element will get additional behavior. For `\'number\'`\\ntype of one-time-password only numeric values will be validated. In case if any other input provided\\nevent is going to be stopped from propageting and default behavior will be prevented.\\n\\nIf all requirements met properly, based on `event.inputType` focus is going to be shifted.\\nFor `insertText` event focus is going to be changed to the next sibling.\\nFor `deleteContentBackward` event focus is going to be changed to the previous sibling.\\n\\n\\n","description":"<p>Handle input changes.</p>\\n<p>Method used during input changes event.\\nInitially based on <code>type</code> input element will get additional behavior. For <code>&#39;number&#39;</code>\\ntype of one-time-password only numeric values will be validated. In case if any other input provided\\nevent is going to be stopped from propageting and default behavior will be prevented.</p>\\n<p>If all requirements met properly, based on <code>event.inputType</code> focus is going to be shifted.\\nFor <code>insertText</code> event focus is going to be changed to the next sibling.\\nFor <code>deleteContentBackward</code> event focus is going to be changed to the previous sibling.</p>\\n","jsdoctags":[{"name":{"pos":1888,"end":1893,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"pos":1882,"end":1887,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>input changes event</li>\\n</ul>\\n"},{"name":{"pos":1928,"end":1932,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"OneTimePasswordType","deprecated":false,"deprecationMessage":"","tagName":{"pos":1922,"end":1927,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>one-time-password type</li>\\n</ul>\\n"}]},{"name":"selectInput","args":[{"name":"sibling","type":"EventTarget | ChildNode | null","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":43,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSelect input.\\n\\nMethod used to set active selection for specified HTML input element.\\nIt may be appliead for event targed or child node of any other event.\\n\\n\\n","description":"<p>Select input.</p>\\n<p>Method used to set active selection for specified HTML input element.\\nIt may be appliead for event targed or child node of any other event.</p>\\n","jsdoctags":[{"name":{"pos":1000,"end":1007,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"sibling"},"type":"EventTarget | ChildNode | null","deprecated":false,"deprecationMessage":"","tagName":{"pos":994,"end":999,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>sibling input used to apply selection for.</li>\\n</ul>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>Input Service.</p>\\n<p>Provides business logic for managing inputs of one-time-password component.\\nHas utility classes which is used to focus/select inputs or handle input event changes.</p>\\n","rawdescription":"\\n\\nInput Service.\\n\\nProvides business logic for managing inputs of one-time-password component.\\nHas utility classes which is used to focus/select inputs or handle input event changes.\\n\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport {\\n  InputEventType,\\n  OneTimePasswordType,\\n} from \'@ng-one-time-password/models\';\\n\\n/**\\n * Input Service.\\n *\\n * Provides business logic for managing inputs of one-time-password component.\\n * Has utility classes which is used to focus/select inputs or handle input event changes.\\n *\\n * @class\\n */\\n@Injectable()\\nexport class InputService {\\n  /**\\n   * Focus input.\\n   *\\n   * Method used to set active focus for specified HTML input element.\\n   * It may be appliead for event targed or child node of any other event.\\n   *\\n   * @param sibling - sibling input used to apply focus for.\\n   *\\n   * @public\\n   */\\n  focusInput(sibling: EventTarget | ChildNode | null): void {\\n    if (sibling instanceof HTMLInputElement) {\\n      return sibling.focus();\\n    }\\n  }\\n\\n  /**\\n   * Select input.\\n   *\\n   * Method used to set active selection for specified HTML input element.\\n   * It may be appliead for event targed or child node of any other event.\\n   *\\n   * @param sibling - sibling input used to apply selection for.\\n   *\\n   * @public\\n   */\\n  selectInput(sibling: EventTarget | ChildNode | null): void {\\n    if (sibling instanceof HTMLInputElement) {\\n      return sibling.select();\\n    }\\n  }\\n\\n  /**\\n   * Handle input changes.\\n   *\\n   * Method used during input changes event.\\n   * Initially based on `type` input element will get additional behavior. For `\'number\'`\\n   * type of one-time-password only numeric values will be validated. In case if any other input provided\\n   * event is going to be stopped from propageting and default behavior will be prevented.\\n   *\\n   * If all requirements met properly, based on `event.inputType` focus is going to be shifted.\\n   * For `insertText` event focus is going to be changed to the next sibling.\\n   * For `deleteContentBackward` event focus is going to be changed to the previous sibling.\\n   *\\n   * @param event - input changes event\\n   * @param type - one-time-password type\\n   *\\n   * @public\\n   */\\n  handleInputChange(event: Event, type: OneTimePasswordType): void {\\n    if (\\n      !(event instanceof InputEvent) ||\\n      !(event.target instanceof HTMLInputElement)\\n    ) {\\n      return;\\n    }\\n\\n    // handle input event\\n    // on new value - next sibling should be focused\\n    // on delete value - previous sibling should be focused\\n    switch (event.inputType) {\\n      case InputEventType.INSERT_TEXT:\\n        // validate target input with numeric value\\n        // in case if string value is provided - value should be cleared completely\\n        if (\\n          type === OneTimePasswordType.NUMBER &&\\n          !/[0-9]/.test(event.target.value)\\n        ) {\\n          event.target.value = \'\';\\n          event.preventDefault();\\n          event.stopPropagation();\\n          return;\\n        }\\n        return this.focusInput(event.target.nextSibling);\\n      case InputEventType.DELETE_CONTENT_BACKWARD:\\n        return this.focusInput(event.target.previousSibling);\\n    }\\n  }\\n}\\n","type":"injectable"},{"name":"KeyboardService","id":"injectable-KeyboardService-e8a198b95f2bd176084eaaeacb46a875d87a4756cf2f00950607ab1467a70d5df8940891c09a8a0f36b6c657723ded084a594dfa76341f22ba8eb731c4573919","file":"projects/ng-one-time-password/src/services/keyboard.service.ts","properties":[],"methods":[{"name":"handleKeyPress","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":31,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandle key press event.\\n\\nMethod used to handle keyboard navigation of the one-time-password component.\\nWith left/right arrows focus is going to be shifted accordingly to the input siblings.\\nIn case of Delete and Backspace buttons, if there was no value on input during delete event\\ndefault behavior is going to be prevented, and focus will be turned to a previous sibling.\\n\\n\\n","description":"<p>Handle key press event.</p>\\n<p>Method used to handle keyboard navigation of the one-time-password component.\\nWith left/right arrows focus is going to be shifted accordingly to the input siblings.\\nIn case of Delete and Backspace buttons, if there was no value on input during delete event\\ndefault behavior is going to be prevented, and focus will be turned to a previous sibling.</p>\\n","jsdoctags":[{"name":{"pos":869,"end":874,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":863,"end":868,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""}]}],"deprecated":false,"deprecationMessage":"","description":"<p>Keyboard Service.</p>\\n<p>Provides business logic for keyboard navigation over one-time-password inputs.</p>\\n","rawdescription":"\\n\\nKeyboard Service.\\n\\nProvides business logic for keyboard navigation over one-time-password inputs.\\n\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { Key, OneTimePasswordType } from \'@ng-one-time-password/models\';\\nimport { InputService } from \'./input.service\';\\n\\n/**\\n * Keyboard Service.\\n *\\n * Provides business logic for keyboard navigation over one-time-password inputs.\\n *\\n * @class\\n */\\n@Injectable()\\nexport class KeyboardService {\\n  /**\\n   * @param _input - input management service\\n   */\\n  constructor(private _input: InputService) {}\\n\\n  /**\\n   * Handle key press event.\\n   *\\n   * Method used to handle keyboard navigation of the one-time-password component.\\n   * With left/right arrows focus is going to be shifted accordingly to the input siblings.\\n   * In case of Delete and Backspace buttons, if there was no value on input during delete event\\n   * default behavior is going to be prevented, and focus will be turned to a previous sibling.\\n   *\\n   * @param event\\n   *\\n   * @public\\n   */\\n  handleKeyPress(event: KeyboardEvent): void {\\n    if (!(event.target instanceof HTMLInputElement)) {\\n      return;\\n    }\\n\\n    switch (event.key) {\\n      // move focus backward for delete events\\n      // in case if value esists - default event should be applied\\n      case Key.DELETE:\\n      case Key.BACKSPACE:\\n        if (event.target.value) return;\\n        event.preventDefault();\\n        return this._input.focusInput(event.target.previousSibling);\\n      // left and right arrows are responsible for navigating between inputs\\n      case Key.ARROW_LEFT:\\n        if (event.shiftKey) return;\\n        return this._input.focusInput(event.target.previousSibling);\\n      case Key.ARROW_RIGHT:\\n        if (event.shiftKey) return;\\n        return this._input.focusInput(event.target.nextSibling);\\n    }\\n\\n    // clean existing input in case if it already has values\\n    // to replace existing value in the input with a newly typed one\\n    if (\\n      /^[0-9a-zA-Z]$/.test(event.key) &&\\n      event.target.value &&\\n      !event.shiftKey &&\\n      !event.ctrlKey\\n    ) {\\n      event.target.value = \'\';\\n    }\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"_input","type":"InputService","deprecated":false,"deprecationMessage":""}],"line":13,"rawdescription":"\\n\\n","jsdoctags":[{"name":{"pos":356,"end":362,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"_input"},"type":"InputService","deprecated":false,"deprecationMessage":"","tagName":{"pos":350,"end":355,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>input management service</li>\\n</ul>\\n"}]},"type":"injectable"},{"name":"OneTimePasswordService","id":"injectable-OneTimePasswordService-6548fd1fb22e770423959bce715c8766e51c0b20457de2c2f2275c11a4cc9d23ad23a90ac9de55d97a503502777c7be16f6d0ae8415d7355e7bbd12afbbaa786","file":"projects/ng-one-time-password/src/services/one-time-password.service.ts","properties":[],"methods":[{"name":"generateFormGroup","args":[{"name":"length","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"FormGroup","typeParameters":[],"line":25,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGenerate form group.\\n\\nMethod is used to generate angular form group with `length` amount of form controls.\\nEach form control will get `\'control-\' + index` key assigned that can be used to identify the control.\\nThis method should be executed all the time when one-time-password `length` changed.\\n\\n\\n","description":"<p>Generate form group.</p>\\n<p>Method is used to generate angular form group with <code>length</code> amount of form controls.\\nEach form control will get <code>&#39;control-&#39; + index</code> key assigned that can be used to identify the control.\\nThis method should be executed all the time when one-time-password <code>length</code> changed.</p>\\n","jsdoctags":[{"name":{"pos":621,"end":627,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"length"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":615,"end":620,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>one-time-password length</li>\\n</ul>\\n"},{"tagName":{"pos":661,"end":668,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>form group filled with required form controls</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>One-Time-Password Service.</p>\\n<p>Provides business logic for one-time-password component management.</p>\\n","rawdescription":"\\n\\nOne-Time-Password Service.\\n\\nProvides business logic for one-time-password component management.\\n\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { FormControl, FormGroup } from \'@angular/forms\';\\n\\n/**\\n * One-Time-Password Service.\\n *\\n * Provides business logic for one-time-password component management.\\n *\\n * @class\\n */\\n@Injectable()\\nexport class OneTimePasswordService {\\n  /**\\n   * Generate form group.\\n   *\\n   * Method is used to generate angular form group with `length` amount of form controls.\\n   * Each form control will get `\'control-\' + index` key assigned that can be used to identify the control.\\n   * This method should be executed all the time when one-time-password `length` changed.\\n   *\\n   * @param length - one-time-password length\\n   * @returns form group filled with required form controls\\n   *\\n   * @public\\n   */\\n  generateFormGroup(length: number): FormGroup {\\n    // get controls list\\n    const controls = [...Array(Number(length))].map(() => new FormControl());\\n\\n    // build group from controls\\n    // assign `\'control-\' + index` control name\\n    const group = Object.entries(controls).reduce(\\n      (prev, [key, control]) => ({ ...prev, [`control-${key}`]: control }),\\n      {}\\n    );\\n\\n    return new FormGroup(group);\\n  }\\n}\\n","type":"injectable"}],"guards":[],"interceptors":[],"classes":[{"name":"ValueControl","id":"class-ValueControl-29b970699270e4fb0dcc584c428be870bf9bac6122814546e80abd791cb8d9e499330127a1284488c683f1ff1fdb6f289b6da1ddbfc36aa9327bf526c4627250","file":"projects/ng-one-time-password/src/models/value-control.model.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ControlValueAccessor } from \'@angular/forms\';\\n\\n/**\\n * Custom On Change Callback.\\n */\\nexport type CustomOnChange = (value: unknown) => void;\\n\\n/**\\n * Custom On Touched Callback.\\n */\\nexport type CustomOnTouched = () => void;\\n\\n/**\\n * Value Control.\\n *\\n * Value control is used as components extension to provide\\n * generic control value accessor functionality of the reactive form control.\\n *\\n * @example\\n * ```\\n * /@Component({\\n *      providers: [\\n *        {\\n *          provide: NG_VALUE_ACCESSOR,\\n *          useExisting: forwardRef(() => NgOneTimePasswordComponent),\\n *          multi: true,\\n *        },\\n *      ],\\n * })\\n * export class MyComponent extends ValueControl<string> {}\\n * ```\\n *\\n *\\n * @class\\n */\\nexport class ValueControl<T> implements ControlValueAccessor {\\n  /**\\n   * Form control value.\\n   *\\n   * @protected\\n   */\\n  protected value?: T;\\n\\n  /**\\n   * On Change.\\n   *\\n   * Default on change callback of form control change detection cycle.\\n   *\\n   * @public\\n   */\\n  onChange: CustomOnChange = () => {};\\n\\n  /**\\n   * On Touched.\\n   *\\n   * Default on touched callback of form control change detection cycle.\\n   *\\n   * @public\\n   */\\n  onTouched: CustomOnTouched = () => {};\\n\\n  /**\\n   * Write Value.\\n   *\\n   * Method used to handle value changes provided on form control init or due to `[(ngModel)]`.\\n   *\\n   * @param value - control value\\n   *\\n   * @public\\n   */\\n  writeValue(value: T): void {\\n    this.value = value;\\n  }\\n\\n  /**\\n   * Register On Change.\\n   *\\n   * Method of the form control lifecycle used to register `onChange` callback.\\n   *\\n   * @param fn - custom on change method\\n   *\\n   * @public\\n   */\\n  registerOnChange(fn: CustomOnChange): void {\\n    this.onChange = fn;\\n  }\\n\\n  /**\\n   * Register On Touched.\\n   *\\n   * Method of the form control lifecycle used to register `onTouched` callback.\\n   *\\n   * @param fn - custom on touched method\\n   *\\n   * @public\\n   */\\n  registerOnTouched(fn: CustomOnTouched): void {\\n    this.onTouched = fn;\\n  }\\n}\\n","properties":[{"name":"onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"CustomOnChange","optional":false,"description":"<p>On Change.</p>\\n<p>Default on change callback of form control change detection cycle.</p>\\n","line":51,"rawdescription":"\\n\\nOn Change.\\n\\nDefault on change callback of form control change detection cycle.\\n\\n","jsdoctags":[{"pos":974,"end":985,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":975,"end":981,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}]},{"name":"onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"CustomOnTouched","optional":false,"description":"<p>On Touched.</p>\\n<p>Default on touched callback of form control change detection cycle.</p>\\n","line":60,"rawdescription":"\\n\\nOn Touched.\\n\\nDefault on touched callback of form control change detection cycle.\\n\\n","jsdoctags":[{"pos":1139,"end":1150,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":1140,"end":1146,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}]},{"name":"value","deprecated":false,"deprecationMessage":"","type":"T","optional":true,"description":"<p>Form control value.</p>\\n","line":42,"rawdescription":"\\n\\nForm control value.\\n\\n","modifierKind":[122],"jsdoctags":[{"pos":824,"end":838,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":333,"tagName":{"pos":825,"end":834,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":122,"escapedText":"protected"},"comment":""}]}],"description":"<p>Value Control.</p>\\n<p>Value control is used as components extension to provide\\ngeneric control value accessor functionality of the reactive form control.</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\"></code></pre></div><p>/@Component({\\n     providers: [\\n       {\\n         provide: NG_VALUE_ACCESSOR,\\n         useExisting: forwardRef(() =&gt; NgOneTimePasswordComponent),\\n         multi: true,\\n       },\\n     ],\\n})\\nexport class MyComponent extends ValueControl<string> {}</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-none\\"></code></pre></div>","rawdescription":"\\n\\nValue Control.\\n\\nValue control is used as components extension to provide\\ngeneric control value accessor functionality of the reactive form control.\\n\\n```html\\n```\\n/@Component({\\n     providers: [\\n       {\\n         provide: NG_VALUE_ACCESSOR,\\n         useExisting: forwardRef(() => NgOneTimePasswordComponent),\\n         multi: true,\\n       },\\n     ],\\n})\\nexport class MyComponent extends ValueControl<string> {}\\n```\\n```\\n\\n","methods":[{"name":"registerOnChange","args":[{"name":"fn","type":"CustomOnChange","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":84,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRegister On Change.\\n\\nMethod of the form control lifecycle used to register `onChange` callback.\\n\\n\\n","description":"<p>Register On Change.</p>\\n<p>Method of the form control lifecycle used to register <code>onChange</code> callback.</p>\\n","jsdoctags":[{"name":{"pos":1576,"end":1578,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fn"},"type":"CustomOnChange","deprecated":false,"deprecationMessage":"","tagName":{"pos":1570,"end":1575,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>custom on change method</li>\\n</ul>\\n"}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"CustomOnTouched","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":97,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRegister On Touched.\\n\\nMethod of the form control lifecycle used to register `onTouched` callback.\\n\\n\\n","description":"<p>Register On Touched.</p>\\n<p>Method of the form control lifecycle used to register <code>onTouched</code> callback.</p>\\n","jsdoctags":[{"name":{"pos":1840,"end":1842,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fn"},"type":"CustomOnTouched","deprecated":false,"deprecationMessage":"","tagName":{"pos":1834,"end":1839,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>custom on touched method</li>\\n</ul>\\n"}]},{"name":"writeValue","args":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":71,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nWrite Value.\\n\\nMethod used to handle value changes provided on form control init or due to `[(ngModel)]`.\\n\\n\\n","description":"<p>Write Value.</p>\\n<p>Method used to handle value changes provided on form control init or due to <code>[(ngModel)]</code>.</p>\\n","jsdoctags":[{"name":{"pos":1337,"end":1342,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":1331,"end":1336,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>control value</li>\\n</ul>\\n"}]}],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[],"implements":["ControlValueAccessor"]}],"directives":[],"components":[{"name":"NgOneTimePasswordComponent","id":"component-NgOneTimePasswordComponent-9a63e5a07bef78b24c06ff964c1615eb8c125e45608e80ccbdabf6e0d749b8c540fbaa4d54f092ac7e41cc5f5d9ccdd5e39ea236c421662efb677630cb58e1bf","file":"projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgOneTimePasswordComponent), multi: true,\\n}","type":"component"}],"selector":"ng-one-time-password","styleUrls":["./ng-one-time-password.component.scss"],"styles":[],"templateUrl":["./ng-one-time-password.component.html"],"viewProviders":[],"inputsClass":[{"name":"focusOnInit","defaultValue":"false","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":2459,"end":2574,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":2460,"end":2467,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>// Masked input:\\n&lt;ng-one-time-password [focusOnInit]=&quot;true&quot;&gt;</ng-one-time-password></p>\\n"},{"pos":2574,"end":2594,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":2575,"end":2582,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":88,"escapedText":"default"},"comment":"<p>false</p>\\n"},{"pos":2594,"end":2606,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":2595,"end":2601,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}],"rawdescription":"\\n\\nOne-Time-Password first input focus on init.\\n\\nUsed to set document focus for first otp input once form control is available.\\nMight be helpful on page load to focus input right away.\\n\\n```html\\n// Masked input:\\n<ng-one-time-password [focusOnInit]=\\"true\\"></ng-one-time-password>\\n```\\n","description":"<p>One-Time-Password first input focus on init.</p>\\n<p>Used to set document focus for first otp input once form control is available.\\nMight be helpful on page load to focus input right away.</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">// Masked input:\\n&lt;ng-one-time-password [focusOnInit]=&quot;true&quot;&gt;&lt;/ng-one-time-password&gt;</code></pre></div>","line":103,"type":"boolean","decorators":[]},{"name":"inputClass","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":3709,"end":3833,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":3710,"end":3717,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>// Masked input:\\n<ng-one-time-password inputClass=\\"custom-css-class\\"></ng-one-time-password></p>\\n"},{"pos":3833,"end":3850,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":3834,"end":3841,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":88,"escapedText":"default"},"comment":"<p>&#39;&#39;</p>\\n"},{"pos":3850,"end":3862,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":3851,"end":3857,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}],"rawdescription":"\\n\\nOne-Time-Password inputs CSS class.\\n\\nUsed to define custom CSS class for all inputs of the One-Time-Password component.\\nMight be helpful for defining custom styles from outside of the component.\\n\\n```html\\n// Masked input:\\n<ng-one-time-password inputClass=\\"custom-css-class\\"></ng-one-time-password>\\n```\\n","description":"<p>One-Time-Password inputs CSS class.</p>\\n<p>Used to define custom CSS class for all inputs of the One-Time-Password component.\\nMight be helpful for defining custom styles from outside of the component.</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">// Masked input:\\n&lt;ng-one-time-password inputClass=&quot;custom-css-class&quot;&gt;&lt;/ng-one-time-password&gt;</code></pre></div>","line":149,"type":"string","decorators":[]},{"name":"length","defaultValue":"6","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":1524,"end":1641,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":1525,"end":1532,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>// Component template\\n&lt;ng-one-time-password [length]=&quot;10&quot;&gt;</ng-one-time-password></p>\\n"},{"pos":1641,"end":1657,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":1642,"end":1649,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":88,"escapedText":"default"},"comment":"<p>6</p>\\n"},{"pos":1657,"end":1668,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":1658,"end":1664,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}],"rawdescription":"\\n\\nOne-Time-Password controls length input.\\n\\nUsed to generate proper amount of HTMLInput elements that are going to be used to provide value.\\n\\n```html\\n// Component template\\n<ng-one-time-password [length]=\\"10\\"></ng-one-time-password>\\n```\\n\\n","description":"<p>One-Time-Password controls length input.</p>\\n<p>Used to generate proper amount of HTMLInput elements that are going to be used to provide value.</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">// Component template\\n&lt;ng-one-time-password [length]=&quot;10&quot;&gt;&lt;/ng-one-time-password&gt;</code></pre></div>","line":67,"type":"number","decorators":[]},{"name":"masked","defaultValue":"false","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":2858,"end":2968,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":2859,"end":2866,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>// Masked input:\\n&lt;ng-one-time-password [masked]=&quot;true&quot;&gt;</ng-one-time-password></p>\\n"},{"pos":2968,"end":2988,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":2969,"end":2976,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":88,"escapedText":"default"},"comment":"<p>false</p>\\n"},{"pos":2988,"end":3000,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":2989,"end":2995,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}],"rawdescription":"\\n\\nOne-Time-Password masked password input.\\n\\nUsed to set document focus for first otp input once form control is available.\\nMight be helpful on page load to focus input right away.\\n\\n```html\\n// Masked input:\\n<ng-one-time-password [masked]=\\"true\\"></ng-one-time-password>\\n```\\n","description":"<p>One-Time-Password masked password input.</p>\\n<p>Used to set document focus for first otp input once form control is available.\\nMight be helpful on page load to focus input right away.</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">// Masked input:\\n&lt;ng-one-time-password [masked]=&quot;true&quot;&gt;&lt;/ng-one-time-password&gt;</code></pre></div>","line":118,"type":"boolean","decorators":[]},{"name":"type","defaultValue":"OneTimePasswordType.TEXT","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":1887,"end":2005,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":1888,"end":1895,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>// Simple text input\\n<ng-one-time-password passwordType=\\"text\\"></ng-one-time-password></p>\\n"},{"pos":2005,"end":2138,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":2006,"end":2013,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>// Only numeric password allowed:\\n<ng-one-time-password passwordType=\\"number\\"></ng-one-time-password></p>\\n"},{"pos":2138,"end":2159,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":2139,"end":2146,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":88,"escapedText":"default"},"comment":"<p>&#39;text&#39;</p>\\n"},{"pos":2159,"end":2170,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":2160,"end":2166,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}],"rawdescription":"\\n\\nOne-Time-Password controls type input.\\n\\nUsed to specify expected type of the input from user.\\n\\nPossible values: `\'text\'`, `\'password\'`, `\'number\'`.\\n\\n\\n```html\\n// Simple text input\\n<ng-one-time-password passwordType=\\"text\\"></ng-one-time-password>\\n```\\n```html\\n// Only numeric password allowed:\\n<ng-one-time-password passwordType=\\"number\\"></ng-one-time-password>\\n```\\n","description":"<p>One-Time-Password controls type input.</p>\\n<p>Used to specify expected type of the input from user.</p>\\n<p>Possible values: <code>&#39;text&#39;</code>, <code>&#39;password&#39;</code>, <code>&#39;number&#39;</code>.</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">// Simple text input\\n&lt;ng-one-time-password passwordType=&quot;text&quot;&gt;&lt;/ng-one-time-password&gt;</code></pre></div><div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">// Only numeric password allowed:\\n&lt;ng-one-time-password passwordType=&quot;number&quot;&gt;&lt;/ng-one-time-password&gt;</code></pre></div>","line":88,"type":"OneTimePasswordType","decorators":[]},{"name":"wrapperClass","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":3268,"end":3394,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":3269,"end":3276,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>// Masked input:\\n<ng-one-time-password wrapperClass=\\"custom-css-class\\"></ng-one-time-password></p>\\n"},{"pos":3394,"end":3411,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":3395,"end":3402,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":88,"escapedText":"default"},"comment":"<p>&#39;&#39;</p>\\n"},{"pos":3411,"end":3423,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":3412,"end":3418,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}],"rawdescription":"\\n\\nOne-Time-Password wrapper CSS class.\\n\\nUsed to define custom CSS class for inputs wrapper of the One-Time-Password component.\\nMight be helpful for defining custom styles from outside of the component.\\n\\n```html\\n// Masked input:\\n<ng-one-time-password wrapperClass=\\"custom-css-class\\"></ng-one-time-password>\\n```\\n","description":"<p>One-Time-Password wrapper CSS class.</p>\\n<p>Used to define custom CSS class for inputs wrapper of the One-Time-Password component.\\nMight be helpful for defining custom styles from outside of the component.</p>\\n<div><pre class=\\"line-numbers\\"><code class=\\"language-html\\">// Masked input:\\n&lt;ng-one-time-password wrapperClass=&quot;custom-css-class&quot;&gt;&lt;/ng-one-time-password&gt;</code></pre></div>","line":134,"type":"string | string[]","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"_$destroy","defaultValue":"new Subject<boolean>()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Component destroy subject.</p>\\n<p>Used by subscriptions to automatically unsubscribe once component gets destroyed.</p>\\n","line":201,"rawdescription":"\\n\\nComponent destroy subject.\\n\\nUsed by subscriptions to automatically unsubscribe once component gets destroyed.\\n\\n","modifierKind":[121],"jsdoctags":[{"pos":5126,"end":5138,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":332,"tagName":{"pos":5127,"end":5134,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"controlsGroup","defaultValue":"new FormGroup({})","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Form controls group.</p>\\n<p>Contains list of FormControl inputs for each segment of One-Time-Password code.\\nControl group used to track any controls changes to aggregate all inputs into the single emitted value of the component.</p>\\n","line":169,"rawdescription":"\\n\\nForm controls group.\\n\\nContains list of FormControl inputs for each segment of One-Time-Password code.\\nControl group used to track any controls changes to aggregate all inputs into the single emitted value of the component.\\n\\n","jsdoctags":[{"pos":4409,"end":4420,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":4410,"end":4416,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}]},{"name":"controlsWrapper","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"ElementRef | null","optional":false,"description":"<p>One-Time-Password control wrapper.</p>\\n<p>Used to access DOM elements within the form control.</p>\\n","line":159,"rawdescription":"\\n\\nOne-Time-Password control wrapper.\\n\\nUsed to access DOM elements within the form control.\\n\\n","decorators":[{"name":"ViewChild","stringifiedArguments":"\'controlsWrapper\', {static: false}"}],"jsdoctags":[{"pos":4023,"end":4042,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":4024,"end":4031,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":88,"escapedText":"default"},"comment":"<p>null</p>\\n"},{"pos":4042,"end":4053,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":4043,"end":4049,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"publuc"},"comment":""}]},{"name":"onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"CustomOnChange","optional":false,"description":"<p>On Change.</p>\\n<p>Default on change callback of form control change detection cycle.</p>\\n","line":51,"rawdescription":"\\n\\nOn Change.\\n\\nDefault on change callback of form control change detection cycle.\\n\\n","jsdoctags":[{"pos":974,"end":985,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":975,"end":981,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}],"inheritance":{"file":"ValueControl"}},{"name":"onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"CustomOnTouched","optional":false,"description":"<p>On Touched.</p>\\n<p>Default on touched callback of form control change detection cycle.</p>\\n","line":60,"rawdescription":"\\n\\nOn Touched.\\n\\nDefault on touched callback of form control change detection cycle.\\n\\n","jsdoctags":[{"pos":1139,"end":1150,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":1140,"end":1146,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}],"inheritance":{"file":"ValueControl"}},{"name":"value","deprecated":false,"deprecationMessage":"","type":"T","optional":true,"description":"<p>Form control value.</p>\\n","line":42,"rawdescription":"\\n\\nForm control value.\\n\\n","modifierKind":[122],"jsdoctags":[{"pos":824,"end":838,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":333,"tagName":{"pos":825,"end":834,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":122,"escapedText":"protected"},"comment":""}],"inheritance":{"file":"ValueControl"}}],"methodsClass":[{"name":"_onValueChange","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":390,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nValue change.\\n\\nMethod used to handle form control value changes.\\nDuring this method `this.value` is going to be updated and used for angular\'s reactive form\\nvalue changes detection cycle.\\n\\n\\n","description":"<p>Value change.</p>\\n<p>Method used to handle form control value changes.\\nDuring this method <code>this.value</code> is going to be updated and used for angular&#39;s reactive form\\nvalue changes detection cycle.</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":10780,"end":10785,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":10774,"end":10779,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>one-time-password value</li>\\n</ul>\\n"},{"tagName":{"pos":10823,"end":10830,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"_setupControls","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":404,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSetup controls.\\n\\nMethod used to create form group and generate form controls for code inputs\\nbased on `length` of the one-time-password. Method is usually executed on component init\\nor during the changes that affects component\'s `length`.\\n\\n","description":"<p>Setup controls.</p>\\n<p>Method used to create form group and generate form controls for code inputs\\nbased on <code>length</code> of the one-time-password. Method is usually executed on component init\\nor during the changes that affects component&#39;s <code>length</code>.</p>\\n","modifierKind":[121],"jsdoctags":[{"tagName":{"pos":11221,"end":11228,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"_setValue","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":432,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSet value.\\n\\nMethod used to update controls with new provided `value`.\\nAfterwards angular form changes cycle will be fired to provide this value to the reactive form.\\n\\n\\n","description":"<p>Set value.</p>\\n<p>Method used to update controls with new provided <code>value</code>.\\nAfterwards angular form changes cycle will be fired to provide this value to the reactive form.</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":11984,"end":11989,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":11978,"end":11983,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>one-time-password value</li>\\n</ul>\\n"},{"tagName":{"pos":12027,"end":12034,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"_updateControls","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":450,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdate controls value.\\n\\nMethod used to set controls list value. Each control will get own value assigned based on\\nthe char index of the `value` string.\\n\\n\\n","description":"<p>Update controls value.</p>\\n<p>Method used to set controls list value. Each control will get own value assigned based on\\nthe char index of the <code>value</code> string.</p>\\n","modifierKind":[121],"jsdoctags":[{"name":{"pos":12375,"end":12380,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":12369,"end":12374,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>one-time-password value</li>\\n</ul>\\n"},{"tagName":{"pos":12418,"end":12425,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":121,"escapedText":"private"},"comment":""}]},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":264,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent view init.\\n\\nOnce all input elements is available on the view - after view init hook is used to provide\\nfirst input focus based on `focusOnInit` state of the component.\\n\\n","description":"<p>Component view init.</p>\\n<p>Once all input elements is available on the view - after view init hook is used to provide\\nfirst input focus based on <code>focusOnInit</code> state of the component.</p>\\n","jsdoctags":[]},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":244,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent changes hook.\\n\\nOn component changes - `length` field is going to be verified.\\nIf `length` of the one-time-password gets changed (not within initialization of the component)\\ncontrols are going to be setted up again. New form group with controls will be created based on new `length`.\\n\\n\\n","description":"<p>Component changes hook.</p>\\n<p>On component changes - <code>length</code> field is going to be verified.\\nIf <code>length</code> of the one-time-password gets changed (not within initialization of the component)\\ncontrols are going to be setted up again. New form group with controls will be created based on new <code>length</code>.</p>\\n","jsdoctags":[{"name":{"pos":6243,"end":6250,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"changes"},"type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"pos":6237,"end":6242,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>simple component changes</li>\\n</ul>\\n"}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":279,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent destroy hook.\\n\\nOn component destroy - `_$destroy` subject value will be provided.\\nAll subscribers that relied on this subject with `takeUntil(_$destroy)` will be destroyed.\\n\\n","description":"<p>Component destroy hook.</p>\\n<p>On component destroy - <code>_$destroy</code> subject value will be provided.\\nAll subscribers that relied on this subject with <code>takeUntil(_$destroy)</code> will be destroyed.</p>\\n","jsdoctags":[]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":229,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent init hook.\\n\\nOn component init = controls are going to be setted up.\\nDuring the phase new form group will be created with a set of group controls\\nbased on `length` of the one-time-password.\\n\\n","description":"<p>Component init hook.</p>\\n<p>On component init = controls are going to be setted up.\\nDuring the phase new form group will be created with a set of group controls\\nbased on <code>length</code> of the one-time-password.</p>\\n","jsdoctags":[]},{"name":"onInputChange","args":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":329,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput changes handler.\\n\\nOnce input gets changed - input handler will be executed.\\nThis event used to provide validate input based on `type` and provide proper one-time-password interaction behavior.\\n\\nIn case if user tried to type text value into `\'number\'` input `type` - input change is going to be prevented, so only numeric values is accepted.\\nAfterwards, once input received text changes - for text insertion input focus is going to be shifted to the next one in the line if accessible.\\nFor text removal - behavior is going to be reverted, so the previous input is going to be focused.\\n\\n\\n\\n","description":"<p>Input changes handler.</p>\\n<p>Once input gets changed - input handler will be executed.\\nThis event used to provide validate input based on <code>type</code> and provide proper one-time-password interaction behavior.</p>\\n<p>In case if user tried to type text value into <code>&#39;number&#39;</code> input <code>type</code> - input change is going to be prevented, so only numeric values is accepted.\\nAfterwards, once input received text changes - for text insertion input focus is going to be shifted to the next one in the line if accessible.\\nFor text removal - behavior is going to be reverted, so the previous input is going to be focused.</p>\\n","jsdoctags":[{"name":{"pos":9081,"end":9086,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"pos":9075,"end":9080,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>input event</li>\\n</ul>\\n"}]},{"name":"onInputFocus","args":[{"name":"event","type":"FocusEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":293,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput focus changes handler.\\n\\nOnce input gets focused and it has some content - full content will be selected.\\nUsed to simplify interaction with the inputs to delete/replace value once input gets revisited.\\n\\n\\n","description":"<p>Input focus changes handler.</p>\\n<p>Once input gets focused and it has some content - full content will be selected.\\nUsed to simplify interaction with the inputs to delete/replace value once input gets revisited.</p>\\n","jsdoctags":[{"name":{"pos":7572,"end":7577,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"FocusEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":7566,"end":7571,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>focus event of the input with HTMLInputElement target.</li>\\n</ul>\\n"}]},{"name":"onInputKeyDown","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":310,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput key down changes handler.\\n\\nOnce keyboard key down event triggered within input - one-time-password keys handler will be executed.\\nThis event used to provide keyboard support for one-time-password management.\\nBased on key this method is going to identify the behavior:\\n- arrow left : focus available left input sibling\\n- arrow right : focus available right input sibling\\n- delete or backspace : prevent default key press behavior for input with no value\\n\\n","description":"<p>Input key down changes handler.</p>\\n<p>Once keyboard key down event triggered within input - one-time-password keys handler will be executed.\\nThis event used to provide keyboard support for one-time-password management.\\nBased on key this method is going to identify the behavior:</p>\\n<ul>\\n<li>arrow left : focus available left input sibling</li>\\n<li>arrow right : focus available right input sibling</li>\\n<li>delete or backspace : prevent default key press behavior for input with no value</li>\\n</ul>\\n","jsdoctags":[{"name":{"pos":8302,"end":8307,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":8296,"end":8301,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>keyboard event</li>\\n</ul>\\n"}]},{"name":"onInputPaste","args":[{"name":"event","type":"ClipboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":343,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput paste handler.\\n\\nOnce paste event is triggered on any of the inputs - paste value is going to be retreived\\nfrom clipboard and set as one-time-password value. As soon as input pasted, last input will be taken in focus.\\n\\n\\n","description":"<p>Input paste handler.</p>\\n<p>Once paste event is triggered on any of the inputs - paste value is going to be retreived\\nfrom clipboard and set as one-time-password value. As soon as input pasted, last input will be taken in focus.</p>\\n","jsdoctags":[{"name":{"pos":9486,"end":9491,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"ClipboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":9480,"end":9485,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>clipboard event</li>\\n</ul>\\n"}]},{"name":"writeValue","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":372,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nWrite control value.\\n\\nMethod used to set initial value for angular form control or receive initial value of `[ngModel]`.\\nWithin this method value is going to be applied for each input from controls list by char index.\\n\\n\\n","description":"<p>Write control value.</p>\\n<p>Method used to set initial value for angular form control or receive initial value of <code>[ngModel]</code>.\\nWithin this method value is going to be applied for each input from controls list by char index.</p>\\n","modifierKind":[158],"jsdoctags":[{"name":{"pos":10337,"end":10342,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":10331,"end":10336,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>one-time-password value</li>\\n</ul>\\n"}],"inheritance":{"file":"ValueControl"}},{"name":"registerOnChange","args":[{"name":"fn","type":"CustomOnChange","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":84,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRegister On Change.\\n\\nMethod of the form control lifecycle used to register `onChange` callback.\\n\\n\\n","description":"<p>Register On Change.</p>\\n<p>Method of the form control lifecycle used to register <code>onChange</code> callback.</p>\\n","jsdoctags":[{"name":{"pos":1576,"end":1578,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fn"},"type":"CustomOnChange","deprecated":false,"deprecationMessage":"","tagName":{"pos":1570,"end":1575,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>custom on change method</li>\\n</ul>\\n"}],"inheritance":{"file":"ValueControl"}},{"name":"registerOnTouched","args":[{"name":"fn","type":"CustomOnTouched","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":97,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRegister On Touched.\\n\\nMethod of the form control lifecycle used to register `onTouched` callback.\\n\\n\\n","description":"<p>Register On Touched.</p>\\n<p>Method of the form control lifecycle used to register <code>onTouched</code> callback.</p>\\n","jsdoctags":[{"name":{"pos":1840,"end":1842,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"fn"},"type":"CustomOnTouched","deprecated":false,"deprecationMessage":"","tagName":{"pos":1834,"end":1839,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>custom on touched method</li>\\n</ul>\\n"}],"inheritance":{"file":"ValueControl"}}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>One-Time-Password Component.</p>\\n<p>OTP component provides flexible way of management otp inputs.\\nAllows to define custom length and type of the input.</p>\\n","rawdescription":"\\n\\nOne-Time-Password Component.\\n\\nOTP component provides flexible way of management otp inputs.\\nAllows to define custom length and type of the input.\\n\\n","type":"component","sourceCode":"import {\\n  AfterViewInit,\\n  ChangeDetectionStrategy,\\n  ChangeDetectorRef,\\n  Component,\\n  ElementRef,\\n  forwardRef,\\n  Input,\\n  OnChanges,\\n  OnDestroy,\\n  OnInit,\\n  SimpleChanges,\\n  ViewChild,\\n} from \'@angular/core\';\\nimport { AbstractControl, FormGroup, NG_VALUE_ACCESSOR } from \'@angular/forms\';\\nimport {\\n  InputType,\\n  OneTimePasswordType,\\n  ValueControl,\\n} from \'@ng-one-time-password/models\';\\nimport {\\n  InputService,\\n  KeyboardService,\\n  OneTimePasswordService,\\n} from \'@ng-one-time-password/services\';\\nimport { Subject, takeUntil } from \'rxjs\';\\n\\n/**\\n * One-Time-Password Component.\\n *\\n * OTP component provides flexible way of management otp inputs.\\n * Allows to define custom length and type of the input.\\n *\\n * @class\\n * @extends ValueControl<string> - value control used to provide reactive form control functionality for component\'s extended class\\n */\\n@Component({\\n  selector: \'ng-one-time-password\',\\n  templateUrl: \'./ng-one-time-password.component.html\',\\n  styleUrls: [\'./ng-one-time-password.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  providers: [\\n    {\\n      provide: NG_VALUE_ACCESSOR,\\n      useExisting: forwardRef(() => NgOneTimePasswordComponent),\\n      multi: true,\\n    },\\n  ],\\n})\\nexport class NgOneTimePasswordComponent\\n  extends ValueControl<string>\\n  implements OnInit, OnChanges, AfterViewInit, OnDestroy\\n{\\n  /**\\n   * One-Time-Password controls length input.\\n   *\\n   * Used to generate proper amount of HTMLInput elements that are going to be used to provide value.\\n   *\\n   * @example\\n   * // Component template\\n   * <ng-one-time-password [length]=\\"10\\"></ng-one-time-password>\\n   * \\n   *\\n   * @default 6\\n   * @public\\n   */\\n  @Input() length = 6;\\n\\n  /**\\n   * One-Time-Password controls type input.\\n   *\\n   * Used to specify expected type of the input from user.\\n   *\\n   * Possible values: `\'text\'`, `\'password\'`, `\'number\'`.\\n   *\\n   *\\n   * @example \\n   * // Simple text input\\n   * <ng-one-time-password passwordType=\\"text\\"></ng-one-time-password>\\n   * \\n   * @example \\n   * // Only numeric password allowed:\\n   * <ng-one-time-password passwordType=\\"number\\"></ng-one-time-password>\\n   * \\n   * @default \'text\'\\n   * @public\\n   */\\n  @Input() type: OneTimePasswordType = OneTimePasswordType.TEXT;\\n\\n  /**\\n   * One-Time-Password first input focus on init.\\n   * \\n   * Used to set document focus for first otp input once form control is available.\\n   * Might be helpful on page load to focus input right away. \\n   * \\n   * @example \\n   * // Masked input:\\n   * <ng-one-time-password [focusOnInit]=\\"true\\"></ng-one-time-password>\\n   * \\n   * @default false\\n   * @public \\n   */\\n  @Input() focusOnInit = false;\\n\\n  /**\\n   * One-Time-Password masked password input.\\n   * \\n   * Used to set document focus for first otp input once form control is available.\\n   * Might be helpful on page load to focus input right away. \\n   * \\n   * @example \\n   * // Masked input:\\n   * <ng-one-time-password [masked]=\\"true\\"></ng-one-time-password>\\n   * \\n   * @default false\\n   * @public \\n   */\\n  @Input() masked = false;\\n\\n  /**\\n   * One-Time-Password wrapper CSS class.\\n   * \\n   * Used to define custom CSS class for inputs wrapper of the One-Time-Password component.\\n   * Might be helpful for defining custom styles from outside of the component.\\n   * \\n   * @example \\n   * // Masked input:\\n   * <ng-one-time-password wrapperClass=\\"custom-css-class\\"></ng-one-time-password>\\n   * \\n   * @default \'\'\\n   * @public \\n   */\\n\\n  @Input() wrapperClass: string | string[] = \'\';\\n\\n  /**\\n   * One-Time-Password inputs CSS class.\\n   * \\n   * Used to define custom CSS class for all inputs of the One-Time-Password component.\\n   * Might be helpful for defining custom styles from outside of the component.\\n   * \\n   * @example \\n   * // Masked input:\\n   * <ng-one-time-password inputClass=\\"custom-css-class\\"></ng-one-time-password>\\n   * \\n   * @default \'\'\\n   * @public \\n   */\\n  @Input() inputClass: string = \'\';\\n\\n  /**\\n   * One-Time-Password control wrapper.\\n   * \\n   * Used to access DOM elements within the form control.\\n   * \\n   * @default null\\n   * @publuc\\n   */\\n  @ViewChild(\'controlsWrapper\', { static: false }) controlsWrapper: ElementRef | null = null;\\n\\n  /**\\n   * Form controls group.\\n   *\\n   * Contains list of FormControl inputs for each segment of One-Time-Password code.\\n   * Control group used to track any controls changes to aggregate all inputs into the single emitted value of the component.\\n   *\\n   * @public\\n   */\\n  controlsGroup = new FormGroup({});\\n\\n  /**\\n   * Form controls.\\n   *\\n   * Get an array of input controls for the One-Time-Password component.\\n   * Used to render list of the inputs, and also during value aggregation.\\n   *\\n   * @public\\n   */\\n  get controls(): AbstractControl[] {\\n    return Object.values(this.controlsGroup.controls);\\n  }\\n\\n  /**\\n   * Input type.\\n   *\\n   * Provide HTMLInputElement type based `masked` status of the component.\\n   *\\n   * @public\\n   */\\n  get inputType(): InputType {\\n    return this.masked ? InputType.PASSWORD : InputType.TEXT\\n  }\\n\\n  /**\\n   * Component destroy subject.\\n   *\\n   * Used by subscriptions to automatically unsubscribe once component gets destroyed.\\n   *\\n   * @private\\n   */\\n  private _$destroy = new Subject<boolean>();\\n\\n  /**\\n   * Constructor is used to inject required services for component business logic management.\\n   *\\n   * @param _otp - one-time-password service\\n   * @param _keyboard - keyboard service\\n   * @param _input - input service\\n   *\\n   * @constructor\\n   */\\n  constructor(\\n    private _otp: OneTimePasswordService,\\n    private _keyboard: KeyboardService,\\n    private _input: InputService\\n  ) {\\n    super();\\n  }\\n\\n  /**\\n   * Component init hook.\\n   *\\n   * On component init = controls are going to be setted up.\\n   * During the phase new form group will be created with a set of group controls\\n   * based on `length` of the one-time-password.\\n   *\\n   * @public\\n   */\\n  ngOnInit(): void {\\n    this._setupControls();\\n  }\\n\\n  /**\\n   * Component changes hook.\\n   *\\n   * On component changes - `length` field is going to be verified.\\n   * If `length` of the one-time-password gets changed (not within initialization of the component)\\n   * controls are going to be setted up again. New form group with controls will be created based on new `length`.\\n   *\\n   * @param changes - simple component changes\\n   *\\n   * @public\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    const passwordLength = changes[\'length\'];\\n\\n    if (\\n      passwordLength?.currentValue &&\\n      passwordLength.currentValue !== passwordLength?.previousValue &&\\n      !passwordLength.firstChange\\n    ) {\\n      this._setupControls();\\n    }\\n  }\\n\\n  /**\\n   * Component view init.\\n   * \\n   * Once all input elements is available on the view - after view init hook is used to provide\\n   * first input focus based on `focusOnInit` state of the component.\\n   * \\n   * @public\\n   */\\n  ngAfterViewInit(): void {\\n    const wrapper = this.controlsWrapper?.nativeElement;\\n    if(this.focusOnInit && wrapper instanceof HTMLElement) {\\n      this._input.focusInput(wrapper.firstChild);\\n    }\\n  }\\n\\n  /**\\n   * Component destroy hook.\\n   *\\n   * On component destroy - `_$destroy` subject value will be provided.\\n   * All subscribers that relied on this subject with `takeUntil(_$destroy)` will be destroyed.\\n   *\\n   * @public\\n   */\\n  ngOnDestroy(): void {\\n    this._$destroy.next(true);\\n  }\\n\\n  /**\\n   * Input focus changes handler.\\n   *\\n   * Once input gets focused and it has some content - full content will be selected.\\n   * Used to simplify interaction with the inputs to delete/replace value once input gets revisited.\\n   *\\n   * @param event - focus event of the input with HTMLInputElement target.\\n   *\\n   * @public\\n   */\\n  onInputFocus(event: FocusEvent): void {\\n    if (!event?.target) return;\\n    this._input.selectInput(event.target);\\n  }\\n\\n  /**\\n   * Input key down changes handler.\\n   *\\n   * Once keyboard key down event triggered within input - one-time-password keys handler will be executed.\\n   * This event used to provide keyboard support for one-time-password management.\\n   * Based on key this method is going to identify the behavior:\\n   * - arrow left : focus available left input sibling\\n   * - arrow right : focus available right input sibling\\n   * - delete or backspace : prevent default key press behavior for input with no value\\n   *\\n   * @param event - keyboard event\\n   */\\n  onInputKeyDown(event: KeyboardEvent): void {\\n    this._keyboard.handleKeyPress(event);\\n  }\\n\\n  /**\\n   * Input changes handler.\\n   *\\n   * Once input gets changed - input handler will be executed.\\n   * This event used to provide validate input based on `type` and provide proper one-time-password interaction behavior.\\n   *\\n   * In case if user tried to type text value into `\'number\'` input `type` - input change is going to be prevented, so only numeric values is accepted.\\n   * Afterwards, once input received text changes - for text insertion input focus is going to be shifted to the next one in the line if accessible.\\n   * For text removal - behavior is going to be reverted, so the previous input is going to be focused.\\n   *\\n   *\\n   * @param event - input event\\n   *\\n   * @public\\n   */\\n  onInputChange(event: Event): void {\\n    this._input.handleInputChange(event, this.type);\\n  }\\n\\n  /**\\n   * Input paste handler.\\n   *\\n   * Once paste event is triggered on any of the inputs - paste value is going to be retreived\\n   * from clipboard and set as one-time-password value. As soon as input pasted, last input will be taken in focus.\\n   *\\n   * @param event - clipboard event\\n   *\\n   * @public\\n   */\\n  onInputPaste(event: ClipboardEvent): void {\\n    const value = event.clipboardData?.getData(\'text\');\\n    event.preventDefault();\\n\\n    // set otp value from clipboard\\n    if (value?.length) {\\n      // prevent text paste into numeric field\\n      if (this.type === OneTimePasswordType.NUMBER && !/[0-9]+/g.test(value)) return;\\n      this._setValue(value);\\n    }\\n\\n    // focus last input\\n    const [target, parent] = event.composedPath();\\n    if (parent instanceof HTMLElement) {\\n      this._input.focusInput(parent.lastElementChild);\\n    }\\n  }\\n\\n  /**\\n   * Write control value.\\n   *\\n   * Method used to set initial value for angular form control or receive initial value of `[ngModel]`.\\n   * Within this method value is going to be applied for each input from controls list by char index.\\n   *\\n   * @param value - one-time-password value\\n   *\\n   * @override\\n   * @public\\n   */\\n  override writeValue(value: string): void {\\n    super.writeValue(value);\\n    if (value) {\\n      this._updateControls(value);\\n    }\\n  }\\n\\n  /**\\n   * Value change.\\n   *\\n   * Method used to handle form control value changes.\\n   * During this method `this.value` is going to be updated and used for angular\'s reactive form\\n   * value changes detection cycle.\\n   *\\n   * @param value - one-time-password value\\n   *\\n   * @private\\n   */\\n  private _onValueChange(value?: string): void {\\n    this.value = value;\\n    this.onChange(value);\\n  }\\n\\n  /**\\n   * Setup controls.\\n   *\\n   * Method used to create form group and generate form controls for code inputs\\n   * based on `length` of the one-time-password. Method is usually executed on component init\\n   * or during the changes that affects component\'s `length`.\\n   *\\n   * @private\\n   */\\n  private _setupControls(): void {\\n    // destroy any previous subscriptions\\n    this._$destroy.next(true);\\n\\n    if (this.length > 0) {\\n      // get form group based on otp length\\n      this.controlsGroup = this._otp.generateFormGroup(this.length);\\n\\n      // handle form group value changes\\n      this.controlsGroup.valueChanges\\n        .pipe(takeUntil(this._$destroy))\\n        .subscribe((controlsValue) => {\\n          const value = Object.values(controlsValue).join(\'\').trim();\\n          this._onValueChange(value);\\n        });\\n    }\\n  }\\n\\n  /**\\n   * Set value.\\n   *\\n   * Method used to update controls with new provided `value`.\\n   * Afterwards angular form changes cycle will be fired to provide this value to the reactive form.\\n   *\\n   * @param value - one-time-password value\\n   *\\n   * @private\\n   */\\n  private _setValue(value?: string): void {\\n    if (value) {\\n      this._updateControls(value);\\n    }\\n\\n    this._onValueChange(value);\\n  }\\n\\n  /**\\n   * Update controls value.\\n   *\\n   * Method used to set controls list value. Each control will get own value assigned based on\\n   * the char index of the `value` string.\\n   *\\n   * @param value - one-time-password value\\n   *\\n   * @private\\n   */\\n  private _updateControls(value: string): void {\\n    this.controls?.forEach((control, index) => {\\n      control.setValue(value[index]);\\n    });\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \\"sass:map\\";\\n// @use \'variables\' as vars;\\n@use \\"../../styles/variables\\" as vars;\\n@use \\"../../styles/input\\" as input;\\n\\n.ng-one-time-password {\\n  display: flex;\\n  gap: input.$input-spacing;\\n\\n  &--input {\\n    box-sizing: border-box;\\n    width: input.$input-width;\\n    height: input.$input-height;\\n    padding: map.get(vars.$padding, \\"md\\") 0px;\\n    font-size: map.get(vars.$font-size, \\"lg\\");\\n    line-height: map.get(vars.$line-height, \\"md\\");\\n    text-align: center;\\n\\n    outline: none;\\n    border: 1px solid vars.$secondary-color;\\n    border-radius: map.get(vars.$border-radius, \\"lg\\");\\n\\n    transition: border-color 500ms;\\n\\n    &:active,\\n    &:focus,\\n    &:hover {\\n      border: 1px solid vars.$primary-color;\\n    }\\n\\n    // input selection\\n    &::selection {\\n      background-color: vars.$primary-color;\\n      color: vars.$base-color;\\n    }\\n\\n    // numeric input set as regular\\n    &::-webkit-outer-spin-button,\\n    &::-webkit-inner-spin-button {\\n      -webkit-appearance: none;\\n      margin: 0;\\n    }\\n\\n    /* Firefox */\\n    &[type=\\"number\\"] {\\n      -moz-appearance: textfield;\\n    }\\n  }\\n}\\n","styleUrl":"./ng-one-time-password.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"<p>Constructor is used to inject required services for component business logic management.</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"_otp","type":"OneTimePasswordService","deprecated":false,"deprecationMessage":""},{"name":"_keyboard","type":"KeyboardService","deprecated":false,"deprecationMessage":""},{"name":"_input","type":"InputService","deprecated":false,"deprecationMessage":""}],"line":201,"rawdescription":"\\n\\nConstructor is used to inject required services for component business logic management.\\n\\n\\n","jsdoctags":[{"name":{"pos":5305,"end":5309,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"_otp"},"type":"OneTimePasswordService","deprecated":false,"deprecationMessage":"","tagName":{"pos":5299,"end":5304,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>one-time-password service</li>\\n</ul>\\n"},{"name":{"pos":5350,"end":5359,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"_keyboard"},"type":"KeyboardService","deprecated":false,"deprecationMessage":"","tagName":{"pos":5344,"end":5349,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>keyboard service</li>\\n</ul>\\n"},{"name":{"pos":5391,"end":5397,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"_input"},"type":"InputService","deprecated":false,"deprecationMessage":"","tagName":{"pos":5385,"end":5390,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>input service</li>\\n</ul>\\n"}]},"extends":"ValueControl","implements":["OnInit","OnChanges","AfterViewInit","OnDestroy"],"accessors":{"controls":{"name":"controls","getSignature":{"name":"controls","type":"[]","returnType":"AbstractControl[]","line":179,"rawdescription":"\\n\\nForm controls.\\n\\nGet an array of input controls for the One-Time-Password component.\\nUsed to render list of the inputs, and also during value aggregation.\\n\\n","description":"<p>Form controls.</p>\\n<p>Get an array of input controls for the One-Time-Password component.\\nUsed to render list of the inputs, and also during value aggregation.</p>\\n","jsdoctags":[{"pos":4650,"end":4661,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":4651,"end":4657,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}]}},"inputType":{"name":"inputType","getSignature":{"name":"inputType","type":"","returnType":"InputType","line":190,"rawdescription":"\\n\\nInput type.\\n\\nProvide HTMLInputElement type based `masked` status of the component.\\n\\n","description":"<p>Input type.</p>\\n<p>Provide HTMLInputElement type based <code>masked</code> status of the component.</p>\\n","jsdoctags":[{"pos":4875,"end":4886,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":331,"tagName":{"pos":4876,"end":4882,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":123,"escapedText":"public"},"comment":""}]}}},"templateData":"<div\\n  class=\\"ng-one-time-password\\"\\n  [formGroup]=\\"controlsGroup\\"\\n  [ngClass]=\\"wrapperClass\\"\\n  #controlsWrapper\\n>\\n  <input\\n    *ngFor=\\"let control of controlsGroup?.controls | keyvalue; let i = index\\"\\n    [id]=\\"\'control-\' + i\\"\\n    class=\\"ng-one-time-password--input\\"\\n    maxlength=\\"1\\"\\n    [type]=\\"inputType\\"\\n    [ngClass]=\\"[\'control-\' + i, inputClass]\\"\\n    autocomplete=\\"one-time-code\\"\\n    [formControlName]=\\"control.key\\"\\n    (paste)=\\"onInputPaste($event)\\"\\n    (focus)=\\"onInputFocus($event)\\"\\n    (keydown)=\\"onInputKeyDown($event)\\"\\n    (input)=\\"onInputChange($event)\\"\\n  />\\n</div>\\n"}],"modules":[{"name":"NgOneTimePasswordModule","id":"module-NgOneTimePasswordModule-fb1b43d9b3676ef037fef497c1ea529e6f1c3da6ea4955a3f6ce505a8c0b3d784aa3c347df665a0ed88589dbbe814048b06b7f8ca701aa6435e3bb11a3f53696","description":"","deprecationMessage":"","deprecated":false,"file":"projects/ng-one-time-password/src/ng-one-time-password.module.ts","methods":[],"sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { NgModule } from \'@angular/core\';\\nimport { ReactiveFormsModule } from \'@angular/forms\';\\nimport { NgOneTimePasswordComponent } from \'./components\';\\nimport {\\n  InputService,\\n  KeyboardService,\\n  OneTimePasswordService,\\n} from \'./services\';\\n\\n@NgModule({\\n  declarations: [NgOneTimePasswordComponent],\\n  providers: [OneTimePasswordService, KeyboardService, InputService],\\n  imports: [CommonModule, ReactiveFormsModule],\\n  exports: [NgOneTimePasswordComponent],\\n})\\nexport class NgOneTimePasswordModule {}\\n","children":[{"type":"providers","elements":[{"name":"InputService"},{"name":"KeyboardService"},{"name":"OneTimePasswordService"}]},{"type":"declarations","elements":[{"name":"NgOneTimePasswordComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"NgOneTimePasswordComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"context","ctype":"miscellaneous","subtype":"variable","file":"projects/ng-one-time-password/src/test.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"require.context(\'./\', true, /\\\\.spec\\\\.ts$/)"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"require","ctype":"miscellaneous","subtype":"variable","file":"projects/ng-one-time-password/src/test.ts","deprecated":false,"deprecationMessage":"","type":"literal type"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"(args) => {\\n  return {\\n    props: {\\n      ...args,\\n    },\\n  };\\n}"}],"functions":[],"typealiases":[{"name":"CustomOnChange","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"projects/ng-one-time-password/src/models/value-control.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Custom On Change Callback.</p>\\n","kind":178},{"name":"CustomOnTouched","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"projects/ng-one-time-password/src/models/value-control.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Custom On Touched Callback.</p>\\n","kind":178}],"enumerations":[{"name":"InputEventType","childs":[{"name":"INSERT_TEXT","deprecated":false,"deprecationMessage":"","value":"insertText"},{"name":"DELETE_CONTENT_BACKWARD","deprecated":false,"deprecationMessage":"","value":"deleteContentBackward"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Input Event Type.</p>\\n<p>Input event change types that are going to be used to handle input changes.</p>\\n<ul>\\n<li><code>insertText</code> is used once text is added to the input</li>\\n<li><code>deleteContentBackward</code> is used once text is removed from the input</li>\\n</ul>\\n","file":"projects/ng-one-time-password/src/models/input.model.ts"},{"name":"InputType","childs":[{"name":"TEXT","deprecated":false,"deprecationMessage":"","value":"text"},{"name":"PASSWORD","deprecated":false,"deprecationMessage":"","value":"password"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Input Type.</p>\\n<p>Input element type, used to display/hide password input.</p>\\n<ul>\\n<li><code>text</code> type is used for regular input</li>\\n<li><code>password</code> type is used for hidden input</li>\\n</ul>\\n","file":"projects/ng-one-time-password/src/models/input.model.ts"},{"name":"Key","childs":[{"name":"ARROW_LEFT","deprecated":false,"deprecationMessage":"","value":"ArrowLeft"},{"name":"ARROW_RIGHT","deprecated":false,"deprecationMessage":"","value":"ArrowRight"},{"name":"DELETE","deprecated":false,"deprecationMessage":"","value":"Delete"},{"name":"BACKSPACE","deprecated":false,"deprecationMessage":"","value":"Backspace"},{"name":"TAB","deprecated":false,"deprecationMessage":"","value":"Tab"},{"name":"SHIFT","deprecated":false,"deprecationMessage":"","value":"Shift"},{"name":"CONTROL","deprecated":false,"deprecationMessage":"","value":"Control"},{"name":"CAPS_LOCK","deprecated":false,"deprecationMessage":"","value":"CapsLock"},{"name":"NUM_LOCK","deprecated":false,"deprecationMessage":"","value":"NumLock"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Keyboard Key Codes.</p>\\n<p>Used to identify keyboard event key codes and handle proper key press.</p>\\n","file":"projects/ng-one-time-password/src/models/keyboard.model.ts"},{"name":"OneTimePasswordType","childs":[{"name":"TEXT","deprecated":false,"deprecationMessage":"","value":"text"},{"name":"NUMBER","deprecated":false,"deprecationMessage":"","value":"number"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>One-Time-Password Type.</p>\\n<ul>\\n<li>&#39;text&#39; type is used for regular text input</li>\\n<li>&#39;password&#39; type is going to be used for hidden text input</li>\\n<li>&#39;number&#39; type is used for numeric values only (any literals are going to be ignored)</li>\\n</ul>\\n","file":"projects/ng-one-time-password/src/models/one-time-password.model.ts"}],"groupedVariables":{"projects/ng-one-time-password/src/test.ts":[{"name":"context","ctype":"miscellaneous","subtype":"variable","file":"projects/ng-one-time-password/src/test.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"require.context(\'./\', true, /\\\\.spec\\\\.ts$/)"},{"name":"require","ctype":"miscellaneous","subtype":"variable","file":"projects/ng-one-time-password/src/test.ts","deprecated":false,"deprecationMessage":"","type":"literal type"}],"projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"(args) => {\\n  return {\\n    props: {\\n      ...args,\\n    },\\n  };\\n}"}]},"groupedFunctions":{},"groupedEnumerations":{"projects/ng-one-time-password/src/models/input.model.ts":[{"name":"InputEventType","childs":[{"name":"INSERT_TEXT","deprecated":false,"deprecationMessage":"","value":"insertText"},{"name":"DELETE_CONTENT_BACKWARD","deprecated":false,"deprecationMessage":"","value":"deleteContentBackward"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Input Event Type.</p>\\n<p>Input event change types that are going to be used to handle input changes.</p>\\n<ul>\\n<li><code>insertText</code> is used once text is added to the input</li>\\n<li><code>deleteContentBackward</code> is used once text is removed from the input</li>\\n</ul>\\n","file":"projects/ng-one-time-password/src/models/input.model.ts"},{"name":"InputType","childs":[{"name":"TEXT","deprecated":false,"deprecationMessage":"","value":"text"},{"name":"PASSWORD","deprecated":false,"deprecationMessage":"","value":"password"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Input Type.</p>\\n<p>Input element type, used to display/hide password input.</p>\\n<ul>\\n<li><code>text</code> type is used for regular input</li>\\n<li><code>password</code> type is used for hidden input</li>\\n</ul>\\n","file":"projects/ng-one-time-password/src/models/input.model.ts"}],"projects/ng-one-time-password/src/models/keyboard.model.ts":[{"name":"Key","childs":[{"name":"ARROW_LEFT","deprecated":false,"deprecationMessage":"","value":"ArrowLeft"},{"name":"ARROW_RIGHT","deprecated":false,"deprecationMessage":"","value":"ArrowRight"},{"name":"DELETE","deprecated":false,"deprecationMessage":"","value":"Delete"},{"name":"BACKSPACE","deprecated":false,"deprecationMessage":"","value":"Backspace"},{"name":"TAB","deprecated":false,"deprecationMessage":"","value":"Tab"},{"name":"SHIFT","deprecated":false,"deprecationMessage":"","value":"Shift"},{"name":"CONTROL","deprecated":false,"deprecationMessage":"","value":"Control"},{"name":"CAPS_LOCK","deprecated":false,"deprecationMessage":"","value":"CapsLock"},{"name":"NUM_LOCK","deprecated":false,"deprecationMessage":"","value":"NumLock"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Keyboard Key Codes.</p>\\n<p>Used to identify keyboard event key codes and handle proper key press.</p>\\n","file":"projects/ng-one-time-password/src/models/keyboard.model.ts"}],"projects/ng-one-time-password/src/models/one-time-password.model.ts":[{"name":"OneTimePasswordType","childs":[{"name":"TEXT","deprecated":false,"deprecationMessage":"","value":"text"},{"name":"NUMBER","deprecated":false,"deprecationMessage":"","value":"number"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>One-Time-Password Type.</p>\\n<ul>\\n<li>&#39;text&#39; type is used for regular text input</li>\\n<li>&#39;password&#39; type is going to be used for hidden text input</li>\\n<li>&#39;number&#39; type is used for numeric values only (any literals are going to be ignored)</li>\\n</ul>\\n","file":"projects/ng-one-time-password/src/models/one-time-password.model.ts"}]},"groupedTypeAliases":{"projects/ng-one-time-password/src/models/value-control.model.ts":[{"name":"CustomOnChange","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"projects/ng-one-time-password/src/models/value-control.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Custom On Change Callback.</p>\\n","kind":178},{"name":"CustomOnTouched","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"projects/ng-one-time-password/src/models/value-control.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Custom On Touched Callback.</p>\\n","kind":178}]}},"routes":[],"coverage":{"count":51,"status":"good","files":[{"filePath":"projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.ts","type":"component","linktype":"component","name":"NgOneTimePasswordComponent","coveragePercent":100,"coverageCount":"29/29","status":"very-good"},{"filePath":"projects/ng-one-time-password/src/models/value-control.model.ts","type":"class","linktype":"classe","name":"ValueControl","coveragePercent":100,"coverageCount":"7/7","status":"very-good"},{"filePath":"projects/ng-one-time-password/src/services/input.service.ts","type":"injectable","linktype":"injectable","name":"InputService","coveragePercent":100,"coverageCount":"4/4","status":"very-good"},{"filePath":"projects/ng-one-time-password/src/services/keyboard.service.ts","type":"injectable","linktype":"injectable","name":"KeyboardService","coveragePercent":66,"coverageCount":"2/3","status":"good"},{"filePath":"projects/ng-one-time-password/src/services/one-time-password.service.ts","type":"injectable","linktype":"injectable","name":"OneTimePasswordService","coveragePercent":100,"coverageCount":"2/2","status":"very-good"},{"filePath":"projects/ng-one-time-password/src/test.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"context","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ng-one-time-password/src/test.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"require","coveragePercent":0,"coverageCount":"0/1","status":"low"}]}}');(0,angular.P)(documentation_namespaceObject);var parameters={controls:{matchers:{color:/(background|color)$/i,date:/Date$/},expanded:!0},docs:{inlineStories:!0}},__namedExportsOrder=["parameters"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":return(0,ClientApi.uc)(value);case"argTypes":return(0,ClientApi.v9)(value);case"decorators":return value.forEach((function(decorator){return(0,ClientApi.$9)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return(0,ClientApi.HZ)(loader,!1)}));case"parameters":return(0,ClientApi.h1)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return(0,ClientApi.My)(enhancer)}));case"argsEnhancers":return value.forEach((function(enhancer){return(0,ClientApi._C)(enhancer)}));case"render":return(0,ClientApi.$P)(value);case"globals":case"globalTypes":var v={};return v[key]=value,(0,ClientApi.h1)(v,!1);case"__namedExportsOrder":case"decorateStory":case"renderToDOM":return null;default:return console.log(key+" was not supported :( !")}}))},"./storybook-init-framework-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js")},"./projects/ng-one-time-password sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./src/components/ng-one-time-password/ng-one-time-password.component.stories.ts":"./projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.stories.ts"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./projects/ng-one-time-password sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$"},"./projects/ng-one-time-password sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./projects/ng-one-time-password sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$",module.exports=webpackEmptyContext},"./projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.scss?ngResource":module=>{"use strict";module.exports=".ng-one-time-password {\n  display: flex;\n  gap: 8px;\n}\n.ng-one-time-password--input {\n  box-sizing: border-box;\n  width: 32px;\n  height: 40px;\n  padding: 12px 0px;\n  font-size: 16px;\n  line-height: 24px;\n  text-align: center;\n  outline: none;\n  border: 1px solid #b6b6b6;\n  border-radius: 12px;\n  transition: border-color 500ms;\n  /* Firefox */\n}\n.ng-one-time-password--input:active, .ng-one-time-password--input:focus, .ng-one-time-password--input:hover {\n  border: 1px solid #2c2c2c;\n}\n.ng-one-time-password--input::selection {\n  background-color: #2c2c2c;\n  color: #FFF;\n}\n.ng-one-time-password--input::-webkit-outer-spin-button, .ng-one-time-password--input::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n.ng-one-time-password--input[type=number] {\n  -moz-appearance: textfield;\n}"},"./projects/ng-one-time-password/src/components/ng-one-time-password/ng-one-time-password.component.html?ngResource":module=>{"use strict";module.exports='<div\n  class="ng-one-time-password"\n  [formGroup]="controlsGroup"\n  [ngClass]="wrapperClass"\n  #controlsWrapper\n>\n  <input\n    *ngFor="let control of controlsGroup?.controls | keyvalue; let i = index"\n    [id]="\'control-\' + i"\n    class="ng-one-time-password--input"\n    maxlength="1"\n    [type]="inputType"\n    [ngClass]="[\'control-\' + i, inputClass]"\n    autocomplete="one-time-code"\n    [formControlName]="control.key"\n    (paste)="onInputPaste($event)"\n    (focus)="onInputFocus($event)"\n    (keydown)="onInputKeyDown($event)"\n    (input)="onInputChange($event)"\n  />\n</div>\n'},"?4f7e":()=>{},"./generated-stories-entry.cjs":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module=__webpack_require__.nmd(module),(0,__webpack_require__("./node_modules/@storybook/angular/dist/ts3.9/client/index.js").configure)([__webpack_require__("./projects/ng-one-time-password sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$"),__webpack_require__("./projects/ng-one-time-password sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$")],module,!1)}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[59],(()=>(__webpack_exec__("./node_modules/@storybook/core-client/dist/esm/globals/polyfills.js"),__webpack_exec__("./node_modules/@storybook/core-client/dist/esm/globals/globals.js"),__webpack_exec__("./storybook-init-framework-entry.js"),__webpack_exec__("./node_modules/@storybook/angular/dist/ts3.9/client/docs/config-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/angular/dist/ts3.9/client/preview/config.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-links/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-docs/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-actions/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-backgrounds/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-measure/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-outline/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-interactions/preview.js-generated-config-entry.js"),__webpack_exec__("./.storybook/preview.js-generated-config-entry.js"),__webpack_exec__("./generated-stories-entry.cjs"),__webpack_exec__("./node_modules/core-js/proposals/reflect-metadata.js"))));__webpack_require__.O()}]);